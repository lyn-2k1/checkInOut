datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  avatar     String?
  password   String
  firstName  String?
  lastName   String?
  resetToken String?
  address    String?
  facebook   String?
  phone      String?

  role Role

  // relations
  checkins        Checkin[]
  receiverTickets Ticket[]  @relation("receiverTickets")
  tickets         Ticket[]
  comments        Comment[]

  chats         Chat[]
  receiverChats Chat[] @relation("receiverChats")
}

model Checkin {
  id                Int      @id @default(autoincrement())
  checkinImage      String
  checkoutImage     String?
  checkinLongitude  String?
  checkinLatitude   String?
  checkoutLongitude String?
  checkoutLatitude  String?
  date              DateTime @default(now()) @db.Date
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User              User?    @relation(fields: [userId], references: [id])
  userId            Int?

  checkouts CheckoutHistory[]
}

model CheckoutHistory {
  id    Int    @id @default(autoincrement())
  image String

  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Checkin   Checkin? @relation(fields: [checkinId], references: [id])
  checkinId Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String?
}

model Ticket {
  id           Int          @id @default(autoincrement())
  title        String
  content      String
  startDate    DateTime
  endDate      DateTime
  ticketType   TicketType
  ticketStatus TicketStatus @default(PENDING)
  Recipient    User         @relation("receiverTickets", fields: [recipientId], references: [id])
  recipientId  Int
  User         User         @relation(fields: [userId], references: [id])
  userId       Int

  comments Comment[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  Ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  ticketId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Chat {
  id Int @id @default(autoincrement())

  message String
  to      User?  @relation("receiverChats", fields: [toId], references: [id])
  toId    Int?
  from    User?  @relation(fields: [fromId], references: [id])
  fromId  Int?
  createdAt DateTime @default(now())
}

enum Role {
  Admin
  User
}

enum TicketType {
  LONG_TERM
  SHORT_TERM
}

enum TicketStatus {
  APPROVED
  PENDING
  REJECTED
  CANCELLED
}
